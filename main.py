# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EwicwQz7YMPHQPxiVqNcjVHIR-ree6fN
"""

#!pip install gradio transformers

#!pip install datasets

from transformers import pipeline, AutoTokenizer, TFAutoModelForSequenceClassification, create_optimizer
import gradio as gr
from datasets import load_dataset, DatasetDict, ClassLabel

classificador = pipeline('zero-shot-classification', model='Mel-Iza0/zero-shot', tokenizer= 'Mel-Iza0/zero-shot')

texto = 'Com o início da era digital, a capacidade de transmissão de informações cresceu apressuradamente, o que facilitou o contato com diversos assuntos, dentre eles a educação sexual . Entretanto, surgiram paralelamente algumas questões, das quais se destacam a preocupação com o momento adequado do ingresso do tema a vida do estudante, assim como de maneira antagônica, o aumento de casos de DST´S\\xa0\\xa0e gravidez indesejada nesse período, a qual leva a um maior questionamento sobre o começo desta pauta., A falta de comunicação sobre a sexualidade entre jovens no Brasil acarreta muitas das vezes\\xa0na inserção desses em um meio repleto de dúvidas, gerando a ocorrência de doenças sexualmente transmissíveis e de gravidez precoce. Com base nisso, muitos adolescentes buscam compreender melhor essas questões na internet, local onde se podem encontrar notícias falsas ou inadequadas para seu desenvolvimento, impedindo assim a correta compreensão do assunto, assim como a responsabilidade imposta por ele., Por outro lado, o diálogo em relação à sexualidade e seus tópicos é um tabu para pais e professores, que se sentem desorientados sobre a devida hora e os devidos critérios a serem tratados com os filhos e alunos, dificultando com que esses esclareçam suas dúvidas e entenda de maneira correta, o que levaria a conscientização da seriedade dessa discussão., Em virtude do que foi mencionado, as indagações a respeito divide várias opiniões e reflexões acima do que deve ser feito. É de extrema importância o Ministério da Educação, em parceria com o Ministério da Cidadania, implantar a educação sexual na matriz curricular estudantil dos jovens, através de aulas elaboradas e destinadas ao esclarecimento de perguntas, assim como palestras e programas com a intenção de propagar o conteúdo aos estudantes, contando com o suporte dos pais, funcionários e encarregados da rede de ensino no país, para que seja realizado constantemente.'

classificador(texto, candidate_labels = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])

def mostrar_resultado(texto):
  return classificador(texto, candidate_labels = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])['labels'][0]

app = gr.Interface(
    fn = mostrar_resultado,
    inputs = ['text'],
    outputs = ['text']
)

app.launch()

mostrar_resultado('Com o início da era digital, a capacidade de transmissão de informações cresceu apressuradamente, o que facilitou o contato com diversos assuntos, dentre eles a educação sexual . Entretanto, surgiram paralelamente algumas questões, das quais se destacam a preocupação com o momento adequado do ingresso do tema a vida do estudante, assim como de maneira antagônica, o aumento de casos de DST´S\\xa0\\xa0e gravidez indesejada nesse período, a qual leva a um maior questionamento sobre o começo desta pauta., A falta de comunicação sobre a sexualidade entre jovens no Brasil acarreta muitas das vezes\\xa0na inserção desses em um meio repleto de dúvidas, gerando a ocorrência de doenças sexualmente transmissíveis e de gravidez precoce. Com base nisso, muitos adolescentes buscam compreender melhor essas questões na internet, local onde se podem encontrar notícias falsas ou inadequadas para seu desenvolvimento, impedindo assim a correta compreensão do assunto, assim como a responsabilidade imposta por ele., Por outro lado, o diálogo em relação à sexualidade e seus tópicos é um tabu para pais e professores, que se sentem desorientados sobre a devida hora e os devidos critérios a serem tratados com os filhos e alunos, dificultando com que esses esclareçam suas dúvidas e entenda de maneira correta, o que levaria a conscientização da seriedade dessa discussão., Em virtude do que foi mencionado, as indagações a respeito divide várias opiniões e reflexões acima do que deve ser feito. É de extrema importância o Ministério da Educação, em parceria com o Ministério da Cidadania, implantar a educação sexual na matriz curricular estudantil dos jovens, através de aulas elaboradas e destinadas ao esclarecimento de perguntas, assim como palestras e programas com a intenção de propagar o conteúdo aos estudantes, contando com o suporte dos pais, funcionários e encarregados da rede de ensino no país, para que seja realizado constantemente.')

dados_redacoes = load_dataset('csv', data_files='/content/redacoes.csv')

dados_redacoes

dados_redacoes['train'].features

dados_redacoes['train']['essay'][0]

dados_redacoes['train']['score'][0]

dados_redacoes['train'].to_pandas()

treino_teste = dados_redacoes['train'].train_test_split(test_size = 0.2, shuffle = False)
treino_teste

dados_redacoes = DatasetDict({
    'treino': treino_teste['train'],
    'teste': treino_teste['test']
})

dados_redacoes

checkpoint_modelo = 'Geotrend/distilbert-base-pt-cased'

tokenizador = AutoTokenizer.from_pretrained(checkpoint_modelo)

texto = dados_redacoes['treino']['essay'][0]
tokens = tokenizador.tokenize(texto)
print(tokens)

ids = tokenizador.convert_tokens_to_ids(tokens)
print(ids)

texto_decodificado = tokenizador.decode(ids)
print(texto_decodificado)

input_codificado = tokenizador(texto, return_tensors = 'tf')
print(input_codificado)

def funcao_tokenizadora(dados_texto):
  return tokenizador(dados_texto['essay'], truncation = True)

dataset_tokenizado = dados_redacoes.map(funcao_tokenizadora, batched = True, remove_columns = ['essay'])

dataset_tokenizado

dataset_tokenizado['treino'].to_pandas()

dataset_tokenizado['teste'].to_pandas()

dataset_tokenizado['treino'].features['score']

dataset_tokenizado['treino'].unique('score')

scores = ClassLabel(names = [str(i) for i in range(11)])

scores

def mapear_labels(dados):
  dados['label'] = scores.str2int(str(dados['score']))
  return dados

dataset_tokenizado = dataset_tokenizado.map(mapear_labels, remove_columns = 'score')

dataset_tokenizado = dataset_tokenizado.cast_column('label', scores)

dataset_tokenizado['treino'].features['label']

checkpoint_modelo = 'Geotrend/distilbert-base-pt-cased'

id2label = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: '10'}
label2id = {valor: chave for chave, valor in id2label.items()}

modelo = TFAutoModelForSequenceClassification.from_pretrained(
    checkpoint_modelo,
    num_labels = dataset_tokenizado['treino'].features['label'].num_classes,
    id2label = id2label,
    label2id = label2id,
    from_pt = True
)

dados_treino = modelo.prepare_tf_dataset(
    dataset_tokenizado['treino'],
    shuffle = True,
    batch_size = 16,
    tokenizer = tokenizador
)

dados_validacao = modelo.prepare_tf_dataset(
    dataset_tokenizado['teste'],
    shuffle = False,
    batch_size = 16,
    tokenizer = tokenizador
)

batch_size = 16
epochs = 2
batches_per_epochs = len(dataset_tokenizado['treino']) // batch_size
total_passos_treino = int(batches_per_epochs)
taxa_de_aprendizado = 2e-5

otimizador, scheduler = create_optimizer(
    init_lr = taxa_de_aprendizado,
    num_warmup_steps = 0,
    num_train_steps = total_passos_treino
)

modelo.compile(optimizer = otimizador)

modelo.fit(dados_treino, validation_data = dados_validacao, epochs= epochs)

resultados_avaliacao = modelo.evaluate(dados_validacao)
print(f'Loss: {resultados_avaliacao}')

from huggingface_hub import notebook_login
notebook_login()

modelo.push_to_hub('distilbert-pt-cased-score-to-essays')

tokenizador.push_to_hub('distilbert-pt-cased-score-to-essays')

modelo = TFAutoModelForSequenceClassification.from_pretrained('Falis-EPG/distilbert-pt-cased-score-to-essays')
tokenizador = AutoTokenizer.from_pretrained('Falis-EPG/distilbert-pt-cased-score-to-essays')

dados_redacoes['teste'].to_pandas()

textos = [dados_redacoes['teste']['essay'][1],
          dados_redacoes['teste']['essay'][909]]

import numpy as np

textos_tokenizados = tokenizador(textos, return_tensors = 'np', padding = 'longest')

resultados = modelo(textos_tokenizados).logits

classificacao = np.argmax(resultados, axis=1)
print(classificacao)

